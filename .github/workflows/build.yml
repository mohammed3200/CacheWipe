name: Build Cache Wipe

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  GO_VERSION: "1.21"

jobs:
  setup:
    name: Setup and Validate
    runs-on: ubuntu-latest
    outputs:
      deps-valid: ${{ steps.validate-deps.outputs.valid }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Validate dependencies
        id: validate-deps
        run: |
          if [ ! -f go.sum ]; then
            echo "::error::go.sum file is missing. Run 'go mod tidy' locally and commit it."
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if go.sum is consistent with go.mod
          go mod tidy
          if ! git diff --quiet go.sum; then
            echo "::error::go.sum is outdated. Run 'go mod tidy' and commit changes."
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "valid=true" >> $GITHUB_OUTPUT

  test:
    name: Test and Validate
    needs: setup
    if: needs.setup.outputs.deps-valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests
        run: |
          set +e
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          TEST_EXIT=$?

          if [ $TEST_EXIT -ne 0 ]; then
            echo "::warning::Some tests failed. Continuing build..."
          fi

          # Always generate coverage report
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
        continue-on-error: true

  lint:
    name: Lint and Code Quality
    needs: setup
    if: needs.setup.outputs.deps-valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.54
          args: --timeout=5m --out-format=colored-line-number
        continue-on-error: true

      - name: Check code formatting
        run: |
          set +e
          test -z "$(gofmt -l .)" || (echo "::warning::Code is not formatted properly. Run 'go fmt ./...'"; exit 0)

      - name: Run go vet
        run: |
          set +e
          go vet ./... || echo "::warning::go vet found issues"

  build:
    name: Build Binaries
    needs: [setup, test, lint]
    if: needs.setup.outputs.deps-valid == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            cgo_enabled: 1
          - goos: linux
            goarch: arm64
            cgo_enabled: 1
          - goos: windows
            goarch: amd64
            cgo_enabled: 0
          - goos: darwin
            goarch: amd64
            cgo_enabled: 0
          - goos: darwin
            goarch: arm64
            cgo_enabled: 0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Linux dependencies
        if: matrix.goos == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libgl1-mesa-dev xorg-dev libglfw3-dev libvulkan-dev

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ matrix.cgo_enabled }}
        run: |
          OUTPUT_NAME="cache-wipe-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT_NAME="$OUTPUT_NAME.exe"
          fi

          VERSION="${GITHUB_REF_NAME:-dev}"
          go build -ldflags="-s -w -X main.Version=$VERSION" -o "$OUTPUT_NAME"
          ls -la "$OUTPUT_NAME"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cache-wipe-${{ matrix.goos }}-${{ matrix.goarch }}
          path: cache-wipe-*
          retention-days: 7
