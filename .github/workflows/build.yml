name: Build Cache Wipe

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  GO_VERSION: "1.21"

jobs:
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download and verify dependencies
        run: |
          go mod tidy
          go mod verify

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests

  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod tidy

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m --out-format=colored-line-number

      - name: Check code formatting
        run: |
          test -z "$(gofmt -l .)" || (echo "Code is not formatted properly. Run 'go fmt ./...'"; exit 1)

      - name: Run go vet
        run: go vet ./...

  build:
    name: Build Binaries
    needs: [test, lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            cgo_enabled: 1
          - goos: linux
            goarch: arm64
            cgo_enabled: 1
          - goos: windows
            goarch: amd64
            cgo_enabled: 0
          - goos: darwin
            goarch: amd64
            cgo_enabled: 0
          - goos: darwin
            goarch: arm64
            cko_enabled: 0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Linux dependencies
        if: matrix.goos == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libgl1-mesa-dev xorg-dev libglfw3-dev libvulkan-dev

      - name: Download dependencies
        run: go mod tidy

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ matrix.cgo_enabled }}
        run: |
          OUTPUT_NAME="cache-wipe-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT_NAME="$OUTPUT_NAME.exe"
          fi

          go build -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o $OUTPUT_NAME
          ls -la $OUTPUT_NAME

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cache-wipe-${{ matrix.goos }}-${{ matrix.goarch }}
          path: cache-wipe-*
          retention-days: 7
